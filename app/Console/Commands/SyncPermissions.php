<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\PermissionManager;

class SyncPermissions extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'permissions:sync 
                            {--roles : Sync roles as well}
                            {--force : Force sync without confirmation}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Sync permissions and roles from code config to database';

    private PermissionManager $permissionManager;

    public function __construct(PermissionManager $permissionManager)
    {
        parent::__construct();
        $this->permissionManager = $permissionManager;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ B·∫Øt ƒë·∫ßu sync permissions...');

        if (!$this->option('force') && !$this->confirm('B·∫°n c√≥ ch·∫Øc mu·ªën sync permissions kh√¥ng?')) {
            $this->info('‚ùå H·ªßy b·ªè sync permissions.');
            return 0;
        }

        // Sync permissions
        $this->info('üìù ƒêang sync permissions...');
        $permissionResults = $this->permissionManager->syncPermissions();
        
        $this->line("‚úÖ Permissions: {$permissionResults['created']} t·∫°o m·ªõi, {$permissionResults['updated']} c·∫≠p nh·∫≠t");

        // Sync roles n·∫øu c√≥ option --roles
        if ($this->option('roles')) {
            $this->info('üë• ƒêang sync roles...');
            $roleResults = $this->permissionManager->syncRoles();
            
            $this->line("‚úÖ Roles: {$roleResults['created']} t·∫°o m·ªõi, {$roleResults['updated']} c·∫≠p nh·∫≠t");
            $this->line("‚úÖ Permissions ƒë√£ g√°n cho {$roleResults['permissions_synced']} roles");
        }

        $this->newLine();
        $this->info('üéâ Sync ho√†n t·∫•t!');
        
        // Hi·ªÉn th·ªã summary
        $this->showSummary();

        return 0;
    }

    private function showSummary(): void
    {
        $this->info('üìä T√≥m t·∫Øt h·ªá th·ªëng:');
        
        $permissions = $this->permissionManager->getPermissionsByModule();
        foreach ($permissions as $module => $perms) {
            $this->line("  üìÇ {$module}: " . count($perms) . " permissions");
        }
        
        if ($this->option('roles')) {
            $roles = $this->permissionManager->getRolesWithPermissions();
            $this->newLine();
            $this->info('üë• Roles:');
            foreach ($roles as $role) {
                $permCount = count($role['permissions'] ?? []);
                $this->line("  üé≠ {$role['display_name']}: {$permCount} permissions");
            }
        }

        $this->newLine();
        $this->info('üí° S·ª≠ d·ª•ng:');
        $this->line('  ‚Ä¢ php artisan permissions:sync --roles    (sync c·∫£ roles)');
        $this->line('  ‚Ä¢ php artisan permissions:sync --force    (kh√¥ng h·ªèi x√°c nh·∫≠n)');
    }
}
